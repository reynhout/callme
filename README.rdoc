= callme

A simple Ruby 1.9 demo C extension with a callback.

Extracted from ongoing efforts to write a Ruby interface to Apache ZooKeeper (github link soon).

== Status

Not working as expected, looking for assistance.

There are two different approaches in this repo: C_ext and FFI_lib.

Neither works as intended under MRI, but the FFI version works under JRuby (thanks to Wayne Meissner).

Ultimately, the MRI FFI_lib version is the one I want to use, but both MRI approaches are failing similarly at present.  The C_ext version might be useful sample code when it's working, as this area seems somewhat thinly documented.


== C_ext

=== Usage

Create a localized Makefile

  ruby1.9 extconf.rb

Build the C library

  make

Run the Ruby code

  USE_C_THR=true USE_RUBY_THR=false USE_C_CB=false ruby1.9 runcallme.rb

The environment settings above are the most relevant for my ultimate use case (and the defaults if none are specified), but the other permutations might reveal interesting bits too.  You can use them to select whether to use C and/or Ruby threads, and whether to use the C callback instead of the Ruby one.


=== Current behaviour (broken)

==== ruby 1.9.1p129 (2009-05-12 revision 23412) [i386-darwin9]
==== ruby 1.9.1p129 (2009-05-12 revision 23412) [i686-linux]

  USE_C_THR=true USE_RUBY_THR=false USE_C_CB=false ruby1.9 runcallme.rb

Starts up properly, but triggering the callback crashes MRI (Bus error).  This might be a dereferencing bug that I haven't been able to fix.

  USE_C_THR=true USE_RUBY_THR=false USE_C_CB=true ruby1.9 runcallme.rb

Starts up properly, and triggering the callback works (the callback executes) but the Ruby threads (main thread and a separate heartbeat) apparently suspend.  Repeated triggers of the callback also execute properly, and sometimes bits of the STDOUT buffer show up...but the lost Ruby threads never get rejoined, AFAICT.


== FFI_lib

=== Usage

Install ruby-ffi from Mercurial repo (0.4.0, presently not released/rubygem'ed)

  hg clone https://kenai.com/hg/ruby-ffi~mercurial
  cd ruby-ffi~mercurial
  rake1.9 gem
  gem1.9 install ffi-0.4.0.gem

Build and run as above.

You might need to make with MODEL=64 to build 64bit libs for JRuby.


=== Current behaviour (broken on MRI, working on JRuby)

==== ruby 1.9.1p129 (2009-05-12 revision 23412) [i386-darwin9]

  USE_C_THR=true USE_RUBY_THR=false USE_C_CB=false ruby1.9 runcallme.rb

Starts up properly, but triggering the callback sometimes works and sometimes crashes MRI ("cfp consistency error - send").  When the callback does execute successfully, the Ruby threads apparently suspend, as in the C_ext version.

...Sometimes this seems to consistently crash the second time the callback is triggered, othertimes not so consistently.

==== jruby 1.3.1 (ruby 1.8.6p287) (2009-06-15 2fd6c3d) (Java HotSpot(TM) 64-Bit Server VM 1.6.0_13) [x86_64-java]

  USE_C_THR=true USE_RUBY_THR=false USE_C_CB=false jruby runcallme.rb

Working..!  JRuby uses JVM threads, obviously...

You might need to make with MODEL=64 to build 64bit libs for JRuby.


== History

This started out as an attempt to make Apache ZooKeeper play with Ruby, via FFI.  Everything was going well until I tried the asynchronous functions with callbacks.  Sometimes the ruby code would appear to hang, sometimes the interpreter would crash.

I backed up a bit and wrote some sample code, still using FFI but not trying to talk to ZooKeeper.  Same problems.  This code is the FFI_lib version in this repo.

Then I decided to go straight to a C ext to see if I was using FFI incorrectly.  This code is the C_ext version in this repo.


== Thanks for any help!


